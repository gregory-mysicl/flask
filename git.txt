Шаг 1: Установка Git
Убедитесь, что у вас установлен Git на вашей машине. Если нет, вы можете скачать его с официального сайта Git и установить следуя инструкциям для вашей операционной системы.

Шаг 2: Создание папки проекта
Создайте новую папку на вашем компьютере, где будет храниться ваш проект.

Шаг 3: Инициализация Git-репозитория
Откройте командную строку или терминал и перейдите в созданную папку проекта. Затем выполните команду `git init`, чтобы инициализировать новый Git-репозиторий в этой папке.

Шаг 4: Добавление файлов в репозиторий
Поместите все файлы вашего проекта в созданную папку. Затем выполните команду `git add .`, чтобы добавить все файлы в Git-индекс.

Шаг 5: Создание коммита
Выполните команду `git commit -m "Initial commit"`, чтобы создать первый коммит в репозитории. Здесь "Initial commit" - это сообщение коммита, которое описывает его содержание.

Шаг 6: Создание удаленного репозитория
Создайте удаленный репозиторий на платформе хостинга Git, такой как GitHub, GitLab или Bitbucket. Следуйте инструкциям на выбранной платформе для создания нового репозитория.

Шаг 7: Связывание локального и удаленного репозиториев
Скопируйте URL удаленного репозитория. Затем выполните команду `git remote add origin <URL>`, где `<URL>` - это скопированный URL удаленного репозитория. Это свяжет ваш локальный репозиторий с удаленным.

Шаг 8: Отправка изменений в удаленный репозиторий
Выполните команду `git push -u origin master`, чтобы отправить ваш локальный репозиторий и его содержимое в удаленный репозиторий. Введите свои учетные данные, если потребуется.

Поздравляю, вы создали Git-репозиторий для вашего проекта и связали его с удаленным репозиторием! Теперь вы можете работать с Git, коммитить изменения, создавать ветки и делиться своим кодом с другими разработчиками.




git..........................start........................git
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

git init
git config --global user.name "gregory-mysicl"
git config --global user.email "gregory.mysicl@gmail.com"
git remote add origin https://github.com/gregory-mysicl/flask.git
git remote -v
git branch - Проверить какая ветка
"git branch -a" или "git branch -r" для отображения всех веток, включая удаленные.
git fetch origin  Обновите вашу локальную ветку с удаленным репозиторием: 




Проверьте текущий статус вашего локального репозитория, чтобы убедиться,
что вы находитесь в чистом состоянии и нет несохраненных изменений:
git status
git add --all  -  Добавляет все измененные файлы в индекс, чтобы они были включены в следующий коммит.
git commit -m "commit_1" - Создание сommita

git push origin master  # Или git push origin main - Отправка изменений на удаленный репозиторий : 
git pull origin master  # Или git pull origin main - Получение изменений из удаленного репозитория:



git remote add main_rep_sergey https://github.com/gregory-mysicl/flask.git - Для того, чтобы добавить 
удалённый репозиторий и присвоить ему имя

git config --global init.defaultBranch <имя>


..............
Проверьте текущий статус вашего локального репозитория, чтобы убедиться, что вы находитесь в чистом состоянии и нет несохраненных изменений:
git status
Если у вас есть несохраненные изменения, выполните команду git stash, чтобы сохранить их временно и очистить рабочую область.
git stash
Обновите вашу локальную ветку с удаленным репозиторием:
git fetch origin
Проверьте доступные ветки и выберите ветку, на которую вы хотите откатиться:
git brach -a
Если нужно, создайте новую ветку и переключитесь на неё:
$ git checkout -b new_branch_name origin/branch_name
Переключитесь на ветку, на которую вы хотите откатиться:
$ git checkout branch_name
При необходимости выполните слияние веток:
$ git merge origin/branch_name
Удалите временные изменения, сохраненные ранее в шаге 2, если такие были:
$ git stash drop

.............


rm -rf .git - Удалит папку

Настройка пользователя:
    git config --global user.name "Ваше Имя"
git config --global user.email "ваш@адрес.почты" git init - Инициализация репозитория : 

git remote add origin <URL удаленного репозитория> - Связывание с удаленным репозиторием : 
git remote remove origin - Удалть репозитории 
git remote -v - Покажет список репозиториев

git add --all  -  Добавляет все измененные файлы в индекс, чтобы они были включены в следующий коммит.
git add . - Всю папку с папкой
git add name_file
git файл2 add файл1 - Добавление в индекс:

git reset файл1 файл2 - Удалениe из индекса
.gitignore  main.py - Игнорировать файл main.py
logs/*.log -  Игнорировать все файлы .log в папке logs
node_modules/ -  Игнорировать папку node_modules целиком

git commit -m "commit_1" - Создание сommita
git push origin master  # Или git push origin main - Отправка изменений на удаленный репозиторий : 
git pull origin master  # Или git pull origin main - Получение изменений из удаленного репозитория:

git branch master или main - создание ветки
git push origin main - Публикация

!!! git push origin master  -  для публикации изменений в ветку "master" на удаленном репозитории "origin".

git branch -m master main - Переименовать master в main
...Просмотр commit...
git log - Просмотр истории коммитов : 

git branch - Проверить какая ветка
"git branch -a" или "git branch -r" для отображения всех веток, включая удаленные.

git remote -v  -  Посмотреть каие добавленны удаленные репозитории


git symbolic-ref refs/heads/main - Изменение имени филиала по умолчанию (по желанию):

Настройка глобального имени филиала по умолчанию (по желанию):
git config --global init.defaultBranch main
git config --global init.defaultBranch master

cp -r /путь/к/исходной/папке /путь/к/целевой/папке - скопировать папку

Проверьте текущий статус вашего локального репозитория, чтобы убедиться, что вы находитесь в чистом состоянии и нет несохраненных изменений:
git status
Если у вас есть несохраненные изменения, выполните команду git stash, чтобы сохранить их временно и очистить рабочую область.
git stash
Обновите вашу локальную ветку с удаленным репозиторием:
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
git fetch origin
Проверьте доступные ветки и выберите ветку, на которую вы хотите откатиться:
git brach -a
Если нужно, создайте новую ветку и переключитесь на неё:
$ git checkout -b new_branch_name origin/branch_name
Переключитесь на ветку, на которую вы хотите откатиться:
$ git checkout branch_name
При необходимости выполните слияние веток:
$ git merge origin/branch_name
Удалите временные изменения, сохраненные ранее в шаге 2, если такие были:
$ git stash drop

